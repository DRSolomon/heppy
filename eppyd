#!/usr/bin/env python

import os
import sys
import ssl
import json
import time
import socket
import asyncore
from pprint import pprint

import Net

SIZE = 4096

def d(a):
    pprint(a)
    exit(1)

class EPP:
    def __init__(self, config):
        self.config = config
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.socket.connect((self.config['host'], self.config['port']))
        self.ssl = ssl.wrap_socket(self.socket,
            keyfile  = self.config['keyfile'],
            certfile = self.config['certfile'],
            ca_certs = self.config['ca_certs'])
        self.greeting = self.read()

    def command(self, xml):
        self.write(xml)
        return self.read()

    def write(self, xml):
        Net.write(self.ssl, xml)

    def read(self):
        return Net.read(self.ssl)

class REPP:
    def __init__(self, config):
        self.config = config
        self.connect()

    def connect(self):
        self.epp = EPP(self.config)
        self.greeting = self.epp.greeting

    def command(self, xml):
        res = self.epp.command(xml)
        if not res:
            self.connect()
            res = self.epp.command(xml)
        return res

class AsyncServer(asyncore.dispatcher):
    def __init__(self, config, epp):
        self.epp = epp
        self.handler = None
        asyncore.dispatcher.__init__(self)
        address = config['address']
        family = socket.AF_INET
        if isinstance(address, basestring):
            family = socket.AF_UNIX
            #os.unlink(address)
        else:
            address = tuple(address)
        self.create_socket(family, socket.SOCK_STREAM)
        self.bind(address)
        self.listen(5)
        return

    def handle_accept(self):
        socket, address = self.accept()
        # We only want to deal with one client at a time
        if self.handler:
            socket.close()
            socket = None
        else:
            self.handler = Handler(socket, self)

    def handle_close(self):
        self.handler = None

class Handler(asyncore.dispatcher):
    def __init__(self, socket, server):
        self.server  = server
        self.epp     = server.epp
        self.query   = ''
        self.answer  = ''
        self.length  = None
        self.wait_till = 0

        # Start reading
        self.is_reading = True

        # Create ourselves, but with an already provided socket
        asyncore.dispatcher.__init__(self, socket)

    def readable(self):
        return self.is_ready() and self.is_reading

    def writable(self):
        return self.is_ready() and not self.is_reading

    def is_ready(self):
        return time.time()>self.wait_till

    def wait(self, seconds):
        self.wait_till = time.time() + seconds

    def handle_read(self):
        if self.length is None:
            net = self.recv(4)
            self.length = Net.int_from_net(net)-4
        else:
            self.query += self.recv(SIZE)
        if len(self.query)>=self.length:
            self.is_reading = False
            self.answer = self.command(self.query)
            self.length = None

    def handle_write(self):
        if self.length is None:
            self.length = len(self.answer) + 4
            self.send(Net.int_to_net(self.length))
        elif len(self.answer) > 0:
            sent = self.send(self.answer)
            self.answer = self.answer[sent:]
        else:
            self.handle_close()

    def command(self, cmd):
        cmd = cmd.strip()
        if cmd == 'greeting':
            return self.epp.greeting
        elif cmd == 'info':
            return json.dumps(self.epp.config, indent=4)
        elif cmd.startswith('wait'):
            try:
                sec = float(cmd[4:])
            except:
                sec = 1
            self.wait(sec)
            return 'waited {0} seconds'.format(sec)
        elif cmd.startswith('<?xml '):
            return self.epp.command(cmd)
        else:
            return 'Wrong command: ' + cmd

    def handle_close(self):
        self.close()
        self.server.handler = None

if len(sys.argv)<2:
    print('usage: eppyd config.json')
    exit(1)
path = sys.argv[1]
with open(path) as file:
    config = json.load(file)

epp    = REPP(config['epp'])
server = AsyncServer(config['local'], epp)

asyncore.loop()

